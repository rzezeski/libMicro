#!/bin/sh
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2018 Abderrahmane Benbachir <anis.benbachir@gmail.com>
# Copyright 2015 Ryan Zezeski <ryan@zinascii.com>
# Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# output csv data of several libmicro output data files, so we could
# run automated analysis scripts
# usage: csv_dump file1 file2 file3 file4 ...
#
#	relative ranking is calculated using first as reference
#	color interpolation is done to indicate relative performance;
#	the redder the color, the slower the result, the greener the
#       faster

case $(uname -m) in
	"SunOS")	AWK=/bin/nawk ;;
	*)		AWK=/usr/bin/awk ;;
esac

$AWK '	BEGIN {
  benchmark_count = 0;
  header_count = 0;
}
/^#/ {
	next;
	}
/errors/ {
	next;
	}
/^\!/ {
	split($0, A_header, "\t");
	name = substr(A_header[1],2);
	headers[name]=name;
	header_data[name,FILENAME] = substr($0, length(name) + 3);
	if (header_names[name] == 0) {
		header_names[name] = ++header_count;
		headers[header_count] = name;
	}
	next;
}

/^[a-zA-z_]/	{
      	if (benchmark_names[$1] == 0) {
		benchmark_names[$1] = ++benchmark_count;
		benchmarks[benchmark_count] = $1;
	}
	if ($2 == "ERROR")
		benchmark_data[$1,FILENAME] = -1;
	else
	   	benchmark_data[$1,FILENAME] = $4;
}


END {
	printf("domain,syscall,time(us),status\n");

	for(i = 1; i < benchmark_count; i++) {
	  for(j = 1; j < benchmark_count; j++) {
	    if (benchmarks[j] > benchmarks[j + 1]) {
	      tmp = benchmarks[j];
	      benchmarks[j] =  benchmarks[j+1];
	      benchmarks[j+1] = tmp;
	    }
	  }
	}

	for(i = 1; i <= benchmark_count; i++) {
		line = "";
		name = benchmarks[i];
		a = benchmark_data[name, ARGV[1]];

		if (a > 0)
			printf("domain1,%s,%f,GOOD\n",name,a);
		else {
			if (a < 0)
				printf("domain1,%s,0,ERROR\n",name);
			else
				printf("domain1,%s,0,MISSING\n",name);

			for (j = 2; j < ARGC; j++)
				printf("domain1,%s,0,NOT_COMPUTED\n",name);
			continue;
		}

		for (j = 2; j < ARGC; j++) {
			b = benchmark_data[name, ARGV[j]];
			if (b > 0) {
				printf("domain%d,%s,%f,GOOD\n",j,name,b);
			}
			else if (b < 0)
				printf("domain%d,%s,0,ERROR\n",j,name);
			else
				printf("domain%d,%s,0,MISSING\n",j,name);

		}
	}

}

function colormap(value, bgcolor, r, g, b)
{
	if (value <= .2)
		value = .2;
	if (value > 5)
		value = 5;

	if (value < .9) {
		r = colorcalc(.2, value, .9, 0, 255);
		g = colorcalc(.2, value, .9, 153, 255);
		b = colorcalc(.2, value, .9, 0, 255);
		bgcolor=sprintf("#%2.2x%2.2x%2.2x",  r, g, b);
	}
	else if (value < 1.1)
		bgcolor="#ffffff";
	else {
		r = 255;
		g = colorcalc(1.1, value, 5, 255, 0);
		b = colorcalc(1.1, value, 5, 255, 0);
		bgcolor=sprintf("#%2.2x%2.2x%2.2x",  r, g, b);
	}

	return (bgcolor);
}

function colorcalc(min, value, max, mincolor, maxcolor)
{
        return((value - min)/(max-min) * (maxcolor-mincolor) + mincolor);
}

' "$@"
